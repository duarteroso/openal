var searchModuleIndex = ["","al","alc",];
var searchIndex = ["manifest","enable","disable","is_enabled","get_boolean","get_double","get_float","get_integer","get_booleanv","get_doublev","get_floatv","get_integerv","get_string","is_extension_present","get_proc_addr","get_enum_value","Buffer","generate","release","is_valid","get_id","get_frequency","get_bits","get_channels","get_size","set_data","bufferf","buffer3f","bufferfv","bufferi","buffer3i","bufferiv","get_bufferf","get_buffer3f","get_bufferfv","get_bufferi","get_buffer3i","get_bufferiv","BufferFormat","new_buffer","new_buffers","release_buffers","DistanceModel","distance_model","doppler_factor","speed_sound","Err","str","check_error","Listener","get_gain","set_gain","get_position","set_position","get_velocity","set_velocity","get_orientation","set_orientation","listenerf","listener3f","listenerfv","listeneri","listener3i","listeneriv","get_listenerf","get_listener3f","get_listenerfv","get_listeneri","get_listener3i","get_listeneriv","new_listener","al_version","Source","generate","release","get_id","is_valid","link_to_buffer","is_relative","loop","is_looping","get_type","get_state","get_offset_time","get_offset_sample","get_offset_byte","get_buffer_id","get_buffers_queued","get_buffers_processed","get_pitch","set_pitch","get_gain","set_gain","get_gain_bounds","set_gain_bounds","get_max_distance","set_max_distance","get_rolloff","set_rolloff","get_cone_outer_gain","set_cone_outer_gain","get_cone_inner_angle","set_cone_inner_angle","get_cone_outer_angle","set_cone_outer_angle","get_reference_distance","set_reference_distance","get_position","set_position","get_velocity","set_velocity","get_direction","set_direction","sourcef","source3f","sourcefv","sourcei","source3i","sourceiv","play","pause","stop","rewind","queue_buffers","unqueue_buffers","SourceType","SourceState","new_source","new_sources","release_sources","play_sources","pause_sources","stop_sources","rewind_sources","get_current_context","remove_current_context","CaptureDevice","open_default","open","close","get_device","start","stop","samples","new_capture_device","Context","create","make_current","process","suspend","destroy","get_device","new_context","new_context_from_data","Device","open_default","open","close","get_data","is_extension_present","get_proc_addr","get_enum_value","get_string","get_integers","new_device","new_device_from_data","Err","str","check_error","alc_version","do_test",];
var searchModuleData = [["# vOpenAL",".html"],[" ","al.html"],[" ","alc.html"],];
var searchData = [[""," manifest of module ",".html#manifest","fn "],["al","","al.html#enable","fn "],["al"," disable an OpenAL capability ","al.html#disable","fn "],["al"," is_enabled checks if a capability is enabled ","al.html#is_enabled","fn "],["al"," get_boolean returns the boolean value of a parameter ","al.html#get_boolean","fn "],["al"," get_double returns the double value of a parameter ","al.html#get_double","fn "],["al"," get_float returns the float value of a parameter ","al.html#get_float","fn "],["al"," get_integer returns the integer value of a parameter ","al.html#get_integer","fn "],["al"," get_booleanv returns the boolean values of a parameter ","al.html#get_booleanv","fn "],["al"," get_doublev returns the double values of a parameter ","al.html#get_doublev","fn "],["al"," get_floatv returns the float values a parameter ","al.html#get_floatv","fn "],["al"," get_integerv returns the integer values a parameter ","al.html#get_integerv","fn "],["al"," get_string returns the string value a parameter ","al.html#get_string","fn "],["al"," is_extension_present checks wether an extension is present ","al.html#is_extension_present","fn "],["al"," get_proc_addr returns the process address ","al.html#get_proc_addr","fn "],["al"," get_enum_value returns an enumeration value ","al.html#get_enum_value","fn "],["al","","al.html#Buffer","struct "],["al"," generate a buffer ","al.html#Buffer.generate","fn (Buffer)"],["al"," release buffer ","al.html#Buffer.release","fn (Buffer)"],["al"," is_valid validates Buffer ","al.html#Buffer.is_valid","fn (Buffer)"],["al"," get_id returns the id of the buffer ","al.html#Buffer.get_id","fn (Buffer)"],["al"," get_frequency returns the frequency of the buffer ","al.html#Buffer.get_frequency","fn (Buffer)"],["al"," get_bits returns the bits of the buffer ","al.html#Buffer.get_bits","fn (Buffer)"],["al"," get_channels returns the number channels of the buffer ","al.html#Buffer.get_channels","fn (Buffer)"],["al"," get_size returns the size of the buffer ","al.html#Buffer.get_size","fn (Buffer)"],["al"," set_data sets the data on the buffer ","al.html#Buffer.set_data","fn (Buffer)"],["al"," bufferf sets a buffer parameter value as float ","al.html#Buffer.bufferf","fn (Buffer)"],["al"," buffer3f sets a buffer parameter value as a tuple of floats ","al.html#Buffer.buffer3f","fn (Buffer)"],["al"," bufferfv sets a buffer parameter value as a vector of floats ","al.html#Buffer.bufferfv","fn (Buffer)"],["al"," bufferi sets a buffer parameter value as integer ","al.html#Buffer.bufferi","fn (Buffer)"],["al"," buffer3i sets a buffer parameter value as a tuple of integers ","al.html#Buffer.buffer3i","fn (Buffer)"],["al"," bufferiv sets a buffer parameter value as vector of integers ","al.html#Buffer.bufferiv","fn (Buffer)"],["al"," get_bufferf returns a buffer parameter value as float ","al.html#Buffer.get_bufferf","fn (Buffer)"],["al"," get_buffer3f returns a buffer parameter value as a tuple of floats ","al.html#Buffer.get_buffer3f","fn (Buffer)"],["al"," get_bufferfv returns a buffer parameter value as vector of floats ","al.html#Buffer.get_bufferfv","fn (Buffer)"],["al"," get_bufferi returns a buffer parameter value as integer ","al.html#Buffer.get_bufferi","fn (Buffer)"],["al"," get_buffer3i returns a buffer parameter value as a tuple of integers ","al.html#Buffer.get_buffer3i","fn (Buffer)"],["al"," get_bufferiv returns a buffer parameter value as vector of integers ","al.html#Buffer.get_bufferiv","fn (Buffer)"],["al","","al.html#BufferFormat","enum "],["al"," new_buffer returns an instance of Buffer ","al.html#new_buffer","fn "],["al"," new_buffers creates multiple instances of Buffer ","al.html#new_buffers","fn "],["al"," release_buffers deletes multiple instances of Buffer ","al.html#release_buffers","fn "],["al","","al.html#DistanceModel","enum "],["al"," distance_model sets the distance model ","al.html#distance_model","fn "],["al"," doppler_factor sets the doppler factor ","al.html#doppler_factor","fn "],["al"," speed_sound sets the speed of sound ","al.html#speed_sound","fn "],["al","","al.html#Err","struct "],["al"," str formats the error into a string ","al.html#Err.str","fn (Err)"],["al"," check_error checks and panics on error ","al.html#check_error","fn "],["al","","al.html#Listener","struct "],["al"," get_gain returns the gain of the listener ","al.html#Listener.get_gain","fn (Listener)"],["al"," set_gain sets the gain of the listener ","al.html#Listener.set_gain","fn (Listener)"],["al"," get_position returns the position of the listener ","al.html#Listener.get_position","fn (Listener)"],["al"," set_position sets the position of the listener ","al.html#Listener.set_position","fn (Listener)"],["al"," get_velocity returns the velocity of the listener ","al.html#Listener.get_velocity","fn (Listener)"],["al"," set_velocity sets the velocity of the listener ","al.html#Listener.set_velocity","fn (Listener)"],["al"," get_orientation returns the orientation of the listener ","al.html#Listener.get_orientation","fn (Listener)"],["al"," set_orientation sets the orientation of the listener ","al.html#Listener.set_orientation","fn (Listener)"],["al"," listenerf sets a listener parameter value as float ","al.html#Listener.listenerf","fn (Listener)"],["al"," listener3f sets a listener parameter value as vector of floats ","al.html#Listener.listener3f","fn (Listener)"],["al"," listenefv sets a listener parameter value as vector of floats ","al.html#Listener.listenerfv","fn (Listener)"],["al"," listeneri sets a listener parameter value as integer ","al.html#Listener.listeneri","fn (Listener)"],["al"," listener3i sets a listener parameter value as vector of integers ","al.html#Listener.listener3i","fn (Listener)"],["al"," listeneriv sets a listener parameter value as vector of integers ","al.html#Listener.listeneriv","fn (Listener)"],["al"," get_listenerf returns a listener parameter value as float ","al.html#Listener.get_listenerf","fn (Listener)"],["al"," get_listener3f returns a listener parameter value as vector of floats ","al.html#Listener.get_listener3f","fn (Listener)"],["al"," get_listenerfv returns a listener parameter value as vector of floats ","al.html#Listener.get_listenerfv","fn (Listener)"],["al"," get_listeneri returns a listener parameter value as integer ","al.html#Listener.get_listeneri","fn (Listener)"],["al"," get_listener3i returns a listener parameter value as vector of integers ","al.html#Listener.get_listener3i","fn (Listener)"],["al"," get_listeneriv returns a listener parameter value as vector of integers ","al.html#Listener.get_listeneriv","fn (Listener)"],["al"," new_listener returns an instance of Listener ","al.html#new_listener","fn "],["al"," al_version returns the AL semantic version ","al.html#al_version","fn "],["al","","al.html#Source","struct "],["al"," generate source ","al.html#Source.generate","fn (Source)"],["al"," release source ","al.html#Source.release","fn (Source)"],["al"," get_id returns the id of the source ","al.html#Source.get_id","fn (Source)"],["al"," is_valid returns true if source is valid ","al.html#Source.is_valid","fn (Source)"],["al"," link_to_buffer links the buffer to the source ","al.html#Source.link_to_buffer","fn (Source)"],["al"," is_relative returns true if source position is relative to listener ","al.html#Source.is_relative","fn (Source)"],["al"," loop sets source to a looping state ","al.html#Source.loop","fn (Source)"],["al"," is_looping returns true if source is set to loop ","al.html#Source.is_looping","fn (Source)"],["al"," get_type returns a source type ","al.html#Source.get_type","fn (Source)"],["al"," get_state returns a source state ","al.html#Source.get_state","fn (Source)"],["al"," get_offset_time returns the playback position offset in seconds ","al.html#Source.get_offset_time","fn (Source)"],["al"," get_offset_sample returns the playback position offset in samples ","al.html#Source.get_offset_sample","fn (Source)"],["al"," get_offset_byte returns the playback position offset in byte ","al.html#Source.get_offset_byte","fn (Source)"],["al"," get_buffer_id returns the buffer id linked to the source ","al.html#Source.get_buffer_id","fn (Source)"],["al"," get_buffers_queued returns the number of buffers queued in the source ","al.html#Source.get_buffers_queued","fn (Source)"],["al"," get_buffers_processed returns the number of buffers in the queue that have been","al.html#Source.get_buffers_processed","fn (Source)"],["al"," get_pitch retuns the pitch of the source ","al.html#Source.get_pitch","fn (Source)"],["al"," set_pitch sets the pitch of the source ","al.html#Source.set_pitch","fn (Source)"],["al"," get_gain returns the gain of the source ","al.html#Source.get_gain","fn (Source)"],["al"," set_gain sets the gain of the source ","al.html#Source.set_gain","fn (Source)"],["al"," get_gain_bounds returns the min/max gain of the source ","al.html#Source.get_gain_bounds","fn (Source)"],["al"," set_gain_bounds sets the min/max gain of the source ","al.html#Source.set_gain_bounds","fn (Source)"],["al"," get_max_distance returns max distance of the source ","al.html#Source.get_max_distance","fn (Source)"],["al"," set_max_distance sets the max distance of the source ","al.html#Source.set_max_distance","fn (Source)"],["al"," get_rolloff returns the rolloff factor of the source ","al.html#Source.get_rolloff","fn (Source)"],["al"," set_rolloff sets the rolloff factor of the source ","al.html#Source.set_rolloff","fn (Source)"],["al"," get_cone_outer_gain returns the cone outer gain of the source ","al.html#Source.get_cone_outer_gain","fn (Source)"],["al"," set_cone_outer_gain sets the cone outer gain of the source ","al.html#Source.set_cone_outer_gain","fn (Source)"],["al"," get_cone_inner_angle returns the cone inner angle of the source ","al.html#Source.get_cone_inner_angle","fn (Source)"],["al"," set_cone_inner_angle sets the cone inner angle of the source ","al.html#Source.set_cone_inner_angle","fn (Source)"],["al"," get_cone_outer_angle returns the cone outer angle of the source ","al.html#Source.get_cone_outer_angle","fn (Source)"],["al"," set_cone_outer_angle sets the cone outer angle of the source ","al.html#Source.set_cone_outer_angle","fn (Source)"],["al"," get_reference_distance Get source reference distance ","al.html#Source.get_reference_distance","fn (Source)"],["al"," set_reference_distance sets the reference distance of the source ","al.html#Source.set_reference_distance","fn (Source)"],["al"," get_position returns the position of the source ","al.html#Source.get_position","fn (Source)"],["al"," set_position sets the position of the source ","al.html#Source.set_position","fn (Source)"],["al"," get_velocity returns the velocity of the source ","al.html#Source.get_velocity","fn (Source)"],["al"," set_velocity sets the velocity of the source ","al.html#Source.set_velocity","fn (Source)"],["al"," get_direction returns the direction of the source ","al.html#Source.get_direction","fn (Source)"],["al"," set_direction sets the direction of the source ","al.html#Source.set_direction","fn (Source)"],["al"," sourcef sets a source parameter value as float ","al.html#Source.sourcef","fn (Source)"],["al"," source3f sets a source parameter value as vector of floats ","al.html#Source.source3f","fn (Source)"],["al"," sourcefv sets a source parameter value as vector of floats ","al.html#Source.sourcefv","fn (Source)"],["al"," sourcei sets a source parameter value as integer ","al.html#Source.sourcei","fn (Source)"],["al"," source3i sets a source parameter value as vector of integers ","al.html#Source.source3i","fn (Source)"],["al"," sourceiv sets a source parameter value as vector of integers ","al.html#Source.sourceiv","fn (Source)"],["al"," play the source ","al.html#Source.play","fn (Source)"],["al"," pause the source ","al.html#Source.pause","fn (Source)"],["al"," stop the source ","al.html#Source.stop","fn (Source)"],["al"," rewind the source ","al.html#Source.rewind","fn (Source)"],["al"," queue_buffers adds buffer into the source's queue ","al.html#Source.queue_buffers","fn (Source)"],["al"," unqueue_buffers removes buffers from the source's queue ","al.html#Source.unqueue_buffers","fn (Source)"],["al"," SourceType defines the types of a source ","al.html#SourceType","enum "],["al"," SourceState defines the states of a source ","al.html#SourceState","enum "],["al"," new_source returns a new instance of Source ","al.html#new_source","fn "],["al"," new_sources generates multiple instances of Source ","al.html#new_sources","fn "],["al"," release_sources deletes multiple instances of Source ","al.html#release_sources","fn "],["al"," play_sources plays multiple sources at once ","al.html#play_sources","fn "],["al"," pause_sources pauses multiple sources at once ","al.html#pause_sources","fn "],["al"," stop_sources stops multiple sources at once ","al.html#stop_sources","fn "],["al"," rewind_sources rewinds multiple sources at once ","al.html#rewind_sources","fn "],["alc","","alc.html#get_current_context","fn "],["alc"," remove_current_context removes the current context ","alc.html#remove_current_context","fn "],["alc","","alc.html#CaptureDevice","struct "],["alc"," open_default opens the default audio device ","alc.html#CaptureDevice.open_default","fn (CaptureDevice)"],["alc"," open_device opens the capture device ","alc.html#CaptureDevice.open","fn (CaptureDevice)"],["alc"," close closes capture devce ","alc.html#CaptureDevice.close","fn (CaptureDevice)"],["alc"," get_device returns a reference to the underlying device ","alc.html#CaptureDevice.get_device","fn (CaptureDevice)"],["alc"," start capture ","alc.html#CaptureDevice.start","fn (CaptureDevice)"],["alc"," stop capture ","alc.html#CaptureDevice.stop","fn (CaptureDevice)"],["alc"," samples of the capture ","alc.html#CaptureDevice.samples","fn (CaptureDevice)"],["alc"," new_capture_device creates a new instance of CaptureDevice ","alc.html#new_capture_device","fn "],["alc","","alc.html#Context","struct "],["alc"," create context ","alc.html#Context.create","fn (Context)"],["alc"," make_current marks a context as current ","alc.html#Context.make_current","fn (Context)"],["alc"," process context ","alc.html#Context.process","fn (Context)"],["alc"," suspend context ","alc.html#Context.suspend","fn (Context)"],["alc"," destroy context ","alc.html#Context.destroy","fn (Context)"],["alc"," get_device returns device linked to context ","alc.html#Context.get_device","fn (Context)"],["alc"," new_context creates an instance of Context ","alc.html#new_context","fn "],["alc"," new_context_from_data creates an instance of Context from data ","alc.html#new_context_from_data","fn "],["alc","","alc.html#Device","struct "],["alc"," open_default opens the default audio device ","alc.html#Device.open_default","fn (Device)"],["alc"," open audio device by name ","alc.html#Device.open","fn (Device)"],["alc"," close device ","alc.html#Device.close","fn (Device)"],["alc"," get_data returns data from the device ","alc.html#Device.get_data","fn (Device)"],["alc"," is_extension_present checks if a certain extension is present ","alc.html#Device.is_extension_present","fn (Device)"],["alc"," get_proc_addr returns the process address ","alc.html#Device.get_proc_addr","fn (Device)"],["alc"," get_enum_value returns an enumeration value ","alc.html#Device.get_enum_value","fn (Device)"],["alc"," get_string returns a device parameter as string ","alc.html#Device.get_string","fn (Device)"],["alc"," get_integers returns a device parameters as vector of strings ","alc.html#Device.get_integers","fn (Device)"],["alc"," new_device creates an instance of Device ","alc.html#new_device","fn "],["alc"," new_device_from_data creates an instance of Device from data ","alc.html#new_device_from_data","fn "],["alc"," Err defines a code for a particular error ","alc.html#Err","struct "],["alc"," str formats the error into a string ","alc.html#Err.str","fn (Err)"],["alc"," check_error checks and panics on errors ","alc.html#check_error","fn "],["alc"," alc_version returns the ALC semantic version ","alc.html#alc_version","fn "],["alc"," do_test is used to test functionality ","alc.html#do_test","fn "],];
